<?php
<<<EOT
基于现有的表结构 设计可扩展的数据表

++++++++++++++++++++++++++++++++++++++++++
三大范式 ：更好的解决数据冗余，数据有效性检查，提高存储效率


第一范式   (确保每列保持原子性)
第一范式是最基本的范式。如果数据库表中的所有字段值都是不可分解的原子值，就说明该数据库表满足了第一范式。
栗子： 地址可以在拆分成为，省、市，县、详细地址

原子性的概念不是一成不变的
第一范式的合理遵循需要根据系统的实际需求来定。
比如某些数据库系统中需要用到“地址”这个属性，
本来直接将“地址”属性设计成一个数据库表的字段就行。
但是如果系统经常会访问“地址”属性中的“城市”部分，
那么就非要将“地址”这个属性重新拆分为省份、城市、详细地址等多个部分进行存储，
这样在对地址中某一部分操作的时候将非常方便。


第二范式  (确保表中的每列都和主键相关)
也就是说在一个数据库表中，一个表中只能保存一种数据，不可以把多种数据保存在同一张数据库表中。

栗子：用户购买产品，一个订单中既有用户信息又有产品信息，
此时如果把这些信息全部存在一张表中就会出现一张表中存在两类数据，
进而产生数据冗余。最好的办法就是把用户信息和产品信息拆分成两张表，
且订单编号作为两张表各自的唯一标识。若再进一步可以把产品信息也拆分，
每个产品给一个编号，如此产生一个新产品表，主键为产品编号。
而产品订单表中则只用存储产品编号即可。


第三范式  (确保每列都和主键列直接相关,而不是间接相关)

栗子：在设计一个订单数据表的时候，可以将客户编号作为一个外键和订单表建立相应的关系。
而不可以在订单表中添加关于客户其它信息（比如姓名、所属公司等）的字段




EOT;
